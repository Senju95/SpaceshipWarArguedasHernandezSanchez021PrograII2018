/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package frontend;

import domain.Matrix;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;

/**
 *
 * @author ahern
 */
public class EnemyField extends javax.swing.JPanel {

    /**
     * Creates new form EnemyField
     */
    Matrix enemyMatrix;
    Font myFont;
    int rectHeight, rectWidth;

    //se obtienen los formatos del sistema
    String[] fonts = getToolkit().getFontList();

    public EnemyField() {
        initComponents();
        enemyMatrix = new Matrix();
        myFont = new Font(fonts[0], Font.BOLD, 20);
        rectHeight = rectWidth = 120;
        getPosition();
    }

    //metodo que obtiene la posicion donde se hizo click sobre este panel
    public void getPosition() {
        addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                System.out.println("se ha hecho click" + " posicionX: " + e.getX() + " posicionY: " + e.getY());
                //aqui debo indicar al servidor que envie la posicion al otro lado    
            }
        });
    }

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g); //To change body of generated methods, choose Tools | Templates.

        Graphics2D g2 = (Graphics2D) g;
        g2.setFont(myFont);

        //grosor y color de las lineas
        g2.setStroke(new java.awt.BasicStroke(4));
        g2.setColor(new Color(206, 10, 27));

        //se dibuja la matriz en la interfaz graifica
        for (int i = 0; i < enemyMatrix.getHeight(); i++) {
            for (int j = 0; j < enemyMatrix.getWidth(); j++) {
                g2.drawRect((rectWidth * j) + 5, (rectHeight * i) + 5, rectWidth, rectHeight);
            }
        }

        drawPostions(g2);
    }

    //Metodo que dibuja las posiciones de cada matriz(solamente gui)
    public void drawPostions(Graphics2D g2) {
        for (int y = 0; y < enemyMatrix.getHeight(); y++) { //filas
            for (int x = 0; x < enemyMatrix.getWidth(); x++) { //columnas
                g2.drawString("A1", ((rectWidth * x) + 20),
                        ((rectHeight * y) + 30)); // X y Y
            }
        }
    }

    @Override
    public int getHeight() {
        return (rectHeight * enemyMatrix.getHeight()) + 10; //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public int getWidth() {
        return (rectWidth * enemyMatrix.getWidth()) + 10; //To change body of generated methods, choose Tools | Templates.
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 787, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 458, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
